version: "3.3"

services:

  traefik:
    image: "traefik:v2.8"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true" #not use in prodution
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" 
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=example@gmail.com" #add a valid email 
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" #create folder and file
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" #port service traefik dashboard 
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped  # Restart on failures
    networks:
      - "traefik"

  myapp:
    build: .
    container_name: "spring-boot"
    labels:
      - "traefik.enable=true"
      # Get the routes from http
      - "traefik.http.routers.myApp.rule=Host(`www.example.tk`)" #add you host
      - "traefik.http.routers.myApp.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.myApp.middlewares=redirect-to-https@docker"
      # Redirect these routes to https
      - "traefik.http.routers.myApp-secured.rule=Host(`www.example.tk`)" #add you host
      - "traefik.http.routers.myApp-secured.entrypoints=websecure"
      # Apply autentificiation ssl with http challenge
      - "traefik.http.routers.myApp-secured.tls.certresolver=myresolver"
      - "traefik.http.routers.myApp-secured.tls=true"
      # Apply Loadbalance app for your app
      - "traefik.http.services.application.loadbalancer.server.port=8080"
      # Apply strip prefix for replace / to /test
      - "traefik.http.routers.myApp-secured.middlewares=myservice-strip"
      - "traefik.http.middlewares.myservice-strip.stripprefix.forceslash=false"
      - "traefik.http.middlewares.myservice-strip.stripprefix.prefixes=/test"

    restart: unless-stopped  # Restart on failures
    networks:
      - "traefik"
  networks:
    # Allow the use of traefik in other docker-compose.yml files
    traefik:
        # external: true
 
  
